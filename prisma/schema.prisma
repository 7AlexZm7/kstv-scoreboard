generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          Role      @default(USER)
  isPremium     Boolean   @default(false) @map("is_premium")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts      Account[]
  sessions      Session[]
  matches       Match[]
  payments      Payment[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Match {
  id          String      @id @default(cuid())
  name        String
  homeTeam    String      @map("home_team")
  awayTeam    String      @map("away_team")
  homeScore   Int         @default(0) @map("home_score")
  awayScore   Int         @default(0) @map("away_score")
  designType  DesignType  @default(MODERN) @map("design_type")
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  userId      String      @map("user_id")

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Payment Payment[]

  @@map("matches")
}

model Payment {
  id        String        @id @default(cuid())
  amount    Float
  status    PaymentStatus @default(PENDING)
  userId    String        @map("user_id")
  matchId   String?       @map("match_id")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  match Match? @relation(fields: [matchId], references: [id], onDelete: SetNull)

  @@map("payments")
}

enum Role {
  USER
  ADMIN
}

enum DesignType {
  CLASSIC
  MODERN
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}